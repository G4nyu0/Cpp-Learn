面向对象三要素：
    封装，继承，多态

//多态 Polymorphism

"函数重载"，指的是：
    使用多个同名的函数实现同一类的功能，但细节不同。
    例：找出三个数中的最大数，但三个数的类型可能为
    int double long
        过去我们就需要分别设计三个函数，对应三种不同
        类型的最大值的获取：

        //能否将多个函数名统一呢？
        int max1 (int a ,int b , int c);
        double max2 (double a , double b ,double c);
        long max3 (long a ,long b ,long c);


"函数重载"（Function overloading）
    简单来说，函数重载就是用同一个函数名定义类似的函数，分别完成不同的功能。
    具体实现方式：
    利用函数的参数个数和参数类型的不同来加以区分。

    //syrup 糖浆

    重载函数的规定
    各重载函数的函数题可以不同
    允许参数类型不同，也允许参数个数不同
    不能只有函数类型不同而参数的个数和类型相同，如：
        int f(int)
        long f(int)
        void f(int)
    在主调函数中被调用时如过这么写，如：
    
    函数模版(（Function template)：
        书上P14 . //Trident 三叉戟

        这也是C++新增的特性
        是对之前函数重载的进一步简化
        建立一个通用函数
        其函数类型和形参类型不具体指定


    为什么要使用函数模版？
    
    ···
    template <typename AnyType>
    void Swao(AnyType a , AnyType b)
    {
        AnyType temp;
        temp = a;
        a = b ;
        b = temp;
    }

    ···


有默认参数的函数
C++ 新特性
默认参数：
    当函数调用中省略了实参时自动使用的值
比如：
    如果将void wow(int n)设置成n有默认值为1
    则函数调用wow()时相当于wow(1)
换一种情况：
假设有函数left()，将字符串和n作参数，返回字符串的前n个字符
如调用函数left("theory",3);会取出前三个字符"the";
现在假设第二个参数n的默认值为1，会怎样？
left("theory",3);的结果是？.  ///
left("theory");的结果是？   ///

如何设置函数的默认值
1.必须通过函数的原型声明来实现   ** 
2.如：left()函数原型声明如下：
    char*left(const char*str,int n=1);


使用默认参数的目的是？
1.简化编程
2.函数调用时，形参不必一定从实参取值 **

注意事项：
    1.有多个形参时，可以部分指定默认值 **
        如：float volume(float h.float r=12.5);

    2.实参形参结合顺序是从左向右 

    3.指定默认值的参数必须放在形参列表的最右端 **

    4.实参个数可与形参不同 ** 


推荐只在默认函数中定义带默认值的参数 。//重新去看录播

一个函数不能既作为重载函数，又作为默认参数的函数 ** 

---
变量的存储类别
1.静态存储：
    - 1 在函数定义外定义或使用关键字static定义的变量，
    在程序的整个运行过程中都存在
2.动态存储


---
自动变量(auto variable)
1.默认情况下，函数中声明的函数形参和局部变量，若不用static
加一声明，则默认为自动存储方式，作用域为局部
2.编译系统会动态分配存储空间
3.当函数调用结束时，自动释放这些空间
4.这些变量的都会消失
5.若变量定义在代码块中，则其存在时间和定义

---
静态变量(static variable)
1.与自动变量相比，寿命更长
2.函数的局部变量的值在函数调用结束后并不立刻消失，
    而是保留原值
3.及其占用的内存单元不释放
4.在下一次该函数被调用时，该变量保留上一次函数调用结束舍的值
5.使用static 关键字来声明
6.编译器将分配固定的内存块来存储静态变量


























































